matrixperm:=function(A,c1,c2)
local B,C,CC;
	B:=TransposedMat(A);
	C:=ShallowCopy(B);
	C[c1]:=B[c2];
	C[c2]:=B[c1];
	CC:=TransposedMat(C);
	return CC;
end;

Myremove:=function(A,list)
local B,i;
Sort(list);
B:=ShallowCopy(A);
Remove(B,list[1]);
if Size(list)>1 then
	for i in [2..Size(list)] do
		Remove(B,list[i]-i+1);
	od;
fi;
return B;
end;

Myremovetrans:=function(A,list)
local B;
B:=TransposedMat(A);
B:=Myremove(B,list);
B:=TransposedMat(B);
return B;
end;

getridandtrans:=function(ncinstance,A,b,linrows,listofedges)
local j,rrlist,conineq,Aprime,bprime,L,Lprime,linrowsprime,i,k,c1,c2;
Aprime:=ShallowCopy(A);
rrlist:=[];
for j  in listofedges  do
	conineq 
	 := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 + ncinstance[3] ] );
	conineq[j] := -1;
	conineq[ncinstance[3] + set2int( [ j ] )] := 1;
    for i in [1..Size(A)] do
		if A[i]=conineq then
		   Append(rrlist,[i]);
		fi;
    od;
od;
Aprime:=Myremove(Aprime,rrlist);
bprime:=Myremove(b,rrlist);
L:= ZeroMutable( [1..Size(b)] );
for k in [1..Size(linrows)] do
	L[linrows[k]]:=1;
od;
Lprime:=Myremove(L,rrlist);
linrowsprime:=[];
for k in [1..Size(Lprime)] do
	if Lprime[k]=1 then
		Append(linrowsprime,[k]);
	fi;
od;
rrlist:=[];
for i in listofedges do
    c1:=i;
    c2:=ncinstance[3] + set2int([i]);
	Aprime:=matrixperm(Aprime,c1,c2); 
	Append(rrlist,[c2]);
od;
Aprime:=Myremovetrans(Aprime,rrlist);
return [Aprime,bprime,linrowsprime];
end;

Justmatrixperm:=function(A,ncinstance,listofedges)
local i,c1,c2,Aprime;
Aprime:=ShallowCopy(A);
for i in listofedges do
	c1:=i;
	c2:=ncinstance[3] + set2int([i]);
	Aprime:=matrixperm(Aprime,c1,c2);
od;
return Aprime;
end;
NCShannonBoundedBiggerRvalue:=function ( ncinstance, Rvalue )
    local  ShOB, i, linrows, con, conlin, j, conineq;
    ShOB := GenShannonUnBounded( ncinstance[3] );
    i := Size( ShOB[1] ) + 1;
    linrows := [  ];
    for con  in ncinstance[1]  do
        conlin := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 ] );
        conlin[set2int( con[1] )] := 1;
        conlin[set2int( con[2] )] := -1;
        Append( ShOB[1], [ conlin ] );
        Append( ShOB[2], [ 0 ] );
        Append( linrows, [ i ] );
        i := i + 1;
    od;
    conlin := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 ] );
    for j  in [ 1 .. ncinstance[2] ]  do
        conlin[set2int( [ j ] )] := 1;
    od;
    conlin[set2int( [ 1 .. ncinstance[2] ] )] := -1;
    Append( ShOB[1], [ conlin ] );
    Append( ShOB[2], [ 0 ] );
    Append( linrows, [ i ] );
    i := i + 1;
    for j  in [ 1 .. Size( ShOB[1] ) ]  do
        ShOB[1][j] := Concatenation( ZeroMutable( [ 1 .. ncinstance[3] ] ), 
           ShOB[1][j] );
    od;
    for j  in [ 1 .. ncinstance[2] ]  do
        conineq 
         := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 + ncinstance[3] ] );
        conineq[j] := 1;
        conineq[ncinstance[3] + set2int( [ j ] )] := -1;
        Append( ShOB[1], [ conineq ] );
        Append( ShOB[2], [ 0 ] );
        conineq 
         := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 + ncinstance[3] ] );
        conineq[j] := -1;
        Append( ShOB[1], [ conineq ] );
        Append( ShOB[2], [ 0 ] );
    od;
    for j  in [ ncinstance[2] + 1 .. ncinstance[3] ]  do
        conineq 
         := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 + ncinstance[3] ] );
        conineq[j] := -1;
        conineq[ncinstance[3] + set2int( [ j ] )] := 1;
        Append( ShOB[1], [ conineq ] );
        Append( ShOB[2], [ 0 ] );
        conineq 
         := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 + ncinstance[3] ] );
        conineq[j] := -1;
        Append( ShOB[1], [ conineq ] );
        Append( ShOB[2], [ 0 ] );
    od;
    conineq := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 + ncinstance[3] ] );
    for j  in [ 1 .. ncinstance[3] ]  do
        conineq[j] := 1;  
    od;
    Append( ShOB[1], [ conineq ] );
    Append( ShOB[2], [ Rvalue] );   #######R<Rvalue
    return [ ShOB[1], ShOB[2], linrows ];
end;
NCRateRegionOBGRO:=function ( ncinstance, usesym, optargs,listofedges,Rvalue)
    local  rlist, A, b, linrows, G, rlist1, ineq, ineqorb, row, rrA, rrb, 
    onemap, nslist, idx, nsrec, los, lolos, Oi, O, trans_ineq,i,j,A1,B1,B2,A2,c,list,dif,Ab;
    rlist := NCShannonBoundedBiggerRvalue( ncinstance,Rvalue );
    A := rlist[1];
    b := rlist[2];
    linrows := rlist[3];
    if usesym = false  then
        G := Group( [ () ] );
    else
        G := NetSymGroup( ncinstance );
    fi;
    if Size( optargs ) > 0  then
        nslist := [  ];
        nsrec := optargs[1];
        for idx  in RecNamesInt( nsrec )  do
            lolos := nsrec.(idx);
            for los  in lolos  do
                if idx = 1  then
                    ineq := ZYNonShannon( los, ncinstance[3] );
                    ineqorb := Orbit( G, ineq, OnEntropySpace );
                    Append( nslist, ineqorb );
                else
                    ineq := DFZNonShannon( idx - 1, los, ncinstance[3] );
                    ineqorb := Orbit( G, ineq, OnEntropySpace );
                    Append( nslist, ineqorb );
                fi;
            od;
        od;
        Append( A, nslist );
        Append( b, ZeroMutable( [ 1 .. Size( nslist ) ] ) );
    fi;
    #####Getting rid of rows and switch columns
    Ab:=getridandtrans(ncinstance,A,b,linrows,listofedges);
    A:=Ab[1];
    b:=Ab[2];
    linrows:=Ab[3];
   #A:=Justmatrixperm(A,ncinstance,listofedges);
    #####
    rlist1 := symCHM( A, b, linrows, ncinstance[3], G, OnProjPts, OnProjIneq, 
       false );
    Display( Concatenation( "stats:  No. of LPs solved = ", 
       String( rlist1[3][1] ), ", \n\t No. of facets = ", 
       String( Size( rlist1[2] ) ), 
       ", \n\tDD stepsizes beyond initial hull = ", String( rlist1[3][2] ) ) 
     );
    rrA := [  ];
    rrb := [  ];
    for row  in rlist1[2]  do
        onemap := function ( x )
              return 1;
          end;
        if not row = List( [ 1 .. Size( row ) ], onemap )  then
            Append( rrA, [ row{[ 1 .. Size( row ) - 1 ]} ] );
            Append( rrb, [ row[Size( row )] ] );
        fi;
    od;
    trans_ineq := [  ];
    Oi := OrbitsDomain( G, rrA, OnProjIneq );
    for O  in Oi  do
        Append( trans_ineq, [ O[1] ] );
    od;
    return [ trans_ineq, RRparse( ncinstance, trans_ineq ) ];
end;
